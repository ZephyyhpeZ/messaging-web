// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}



model User {
  id            String    @id
  username      String    @unique
  discriminator String    @unique
  displayName   String
  email         String?   @unique
  passwordHash  String?
  googleId      String?   @unique
  sessions      Session[]

  createdAt    DateTime       @default(now())
  Server       Server[]
  ServerMember ServerMember[]
  Message      Message[]
  userFriend   Friend[]       @relation("UserFriends")
  friendUser   Friend[]       @relation("FriendUsers")

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Server {
  id           String         @id @default(cuid())
  name         String
  description  String
  ownerId      String
  createdAt    DateTime       @default(now())
  user         User           @relation(fields: [ownerId], references: [id])
  Message      Message[]
  ServerMember ServerMember[]

  @@map("servers")
}

model ServerMember {
  id        String   @id @default(cuid())
  userId    String
  serverId  String
  role      String?
  status    String   @default("PENDING")
  joinedAt  DateTime?
  invitedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  server    Server   @relation(fields: [serverId], references: [id])

  @@map("server_members")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  serverId  String
  userId    String
  timestamp DateTime @default(now())
  edited    String?
  user      User     @relation(fields: [userId], references: [id])
  server    Server   @relation(fields: [serverId], references: [id])

  @@map("messages")
}

model Friend {
  id       String  @id @default(cuid())
  userId   String
  status   String?
  friendId String
  user     User    @relation("UserFriends", fields: [userId], references: [id])
  friend   User    @relation("FriendUsers", fields: [friendId], references: [id])

  @@unique([userId, friendId])
  @@index([userId, friendId])
  @@map("friends")
}
